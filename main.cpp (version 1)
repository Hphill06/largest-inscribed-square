// version 3
/*
this version was uploaded on 2/13/25
added functionality so that the gaps between points are added to the array and will be consisedered for making squares when that feature is added

todo:

1) no find square function: this function will be implemented within the next commit

3) (maybe) After adding the features above if the program runs slow I plan to shrink the possible drawing area in order to make time to run quicker, 
or find a way to better optimize the functions I already have

*/
/*
to do:

implement squares

*/

#include <iostream>
#include "graph1.h"
#include <vector>
#include <random>

using namespace std;
struct point {
	int x;
	int y;
};
struct square {
	vector<point> points; // vector of 4 points that is a rectangle
};


void drawPoints(vector<point> vectorOfPoints);
void drawInstructionText(int size);
bool canPointBeUsed(int x, int y);
square findRandomSquare(vector<point> pointlist);
float DistanceBetweenTwoPoints(point point1, point point2);
void addPoint(vector<point> &pointList,int mouse_x, int mouse_y); // added this function to break it out of the main function since it will get complecated 
void addFinalPoint(vector<point>& pointList);
float slopeOfLine(point point1,point point2);
void addMidpoints(vector<point>& pointList, point point1, point point2);
point getMidPoint(point point1, point point2);
int findPoint(const vector<point>& pointList, const point& target);
void insertPoint(vector<point>& pointList, int index, point newPoint);

int main() {
	displayGraphics();
	srand(time(0));
	// var decleration
	int mouse_X, mouse_Y,points_Array_Size= 0;
	vector<point> points;
	bool has_mouse_Dragged = false;

	drawInstructionText(points_Array_Size);	// draws the inscructions on the top of the screen for the first time, after this its only drawn when the screen is updated

	while (true) {
		points_Array_Size = points.size(); // called at the top of the loop once instead of every single time i need this info

		if (mouseDragged(mouse_X, mouse_Y)) { //only runs if mouseDragged retruns true, and the mouse x and y values are changed by being passed by refrence 
			if (canPointBeUsed(mouse_X, mouse_Y)) { // this if statement fixes a weird error with graph1.h that likes to throw in a -1,-1 input before everything when starting the program
				has_mouse_Dragged = true; // lets the program know it needs to update the screen
				addPoint(points, mouse_X, mouse_Y);
			}
			
		}
		//input handling
		
		if (up()) { // reset input
			points.clear(); // clears the vector of past points
			clearGraphics(); // clears the screen
			drawInstructionText(0); // reprints the text at the top of the screen so its not just a blank screen

		}
		if (down()) {// outputs a random square on the shape
			findRandomSquare(points);
			NULL;
		}
		
		if (has_mouse_Dragged) { // if updated
			clearGraphics(); // clears the graphics so the new updated version can be drawn
			drawPoints(points); // draws the shape onto screen by taking the points given by the users mouse dragging and connecting them via lines
			drawInstructionText(points_Array_Size);// reprints the text at the top of the screen so its not just a blank screen
			has_mouse_Dragged = false; // resets so that if the user stops putting in any input, it doesnt redraw the screen over and over
		}
	}
	return 0;
}

void drawPoints(vector<point> vectorOfPoints) // only called if the mouse is currently being dragged;
{
	int size = vectorOfPoints.size() - 1;
	for (int i = 0; i < size; i++) { // links every point from 0 to size via a line with a width of 3
		drawLine(vectorOfPoints[i].x, vectorOfPoints[i].y, vectorOfPoints[i + 1].x, vectorOfPoints[i + 1].y, 3);
		setColor(drawPoint(vectorOfPoints[i].x, vectorOfPoints[i].y), 255, 0, 0);// this part draws red dots over the top of the white line so i can see where the real points are in the vector
	}
	//after drawing connect
	drawLine(vectorOfPoints[0].x, vectorOfPoints[0].y, vectorOfPoints[size].x, vectorOfPoints[size].y, 3); // connects the first and last point together to make a closed shape
}

void drawInstructionText(int size)
{
	gout << setPos(10, 10) << "drag your mouse to draw a shape, press up on the keyboard to reset points" << endg;
	gout << setPos(10, 25) << "then press right on the keyboard to find the biggest square that can be formed from the points" << endg;
	gout << setPos(10, 40) << "sizeOfArray : " << size << endg;
}

bool canPointBeUsed(int x, int y)
{
	if (x < 0 || y < 0) {// if the x or y values are negative do not use them
		return false;
	}
	return true;
}

float DistanceBetweenTwoPoints(point point1, point point2)
{
	return sqrt(pow(point2.x-point1.x,2) + pow(point2.y-point1.y,2));
}

float slopeOfLine(point point1, point point2)
{
	float bottom = (point2.x - point1.x);
	float top = (point2.y - point1.y);
	if (bottom == 0) { return 0; }; // solves divide by zero error
	return top / bottom;
}

point getMidPoint(point point1, point point2)
{
	return point{ ((point1.x + point2.x) / 2), ((point1.y + point2.y) / 2) };
}

void addPoint(vector<point> &pointList, int mouse_x, int mouse_y)
{
    pointList.push_back(point{mouse_x, mouse_y});
    if (pointList.size() > 1) {
        addMidpoints(pointList, pointList[pointList.size() - 2], pointList[pointList.size() - 1]);
    }
}

void addFinalPoint(vector<point>& pointList)
{
	addMidpoints(pointList, pointList[0], pointList[pointList.size() - 1]);
}

void addMidpoints(vector<point>& pointList, point point1, point point2) {
	float distance = DistanceBetweenTwoPoints(point1, point2);

	if (distance < 2) // gets out of recursion
		return;

	point middle = getMidPoint(point1, point2);

	int it = findPoint(pointList, point2);
	cout << it << endl;
	insertPoint(pointList,it,middle); // Insert before point2

	// Recursively add midpoints
	addMidpoints(pointList, point1, middle);// left side of 
	addMidpoints(pointList, middle, point2);// 
}

void insertPoint(vector<point>& pointList, int index, point newPoint) {
	if (index < 0 || index > pointList.size()) {
		return;
	}
	pointList.insert(pointList.begin() + index, newPoint);
}

int findPoint(const vector<point>& pointList, const point& target) {
	for (int i = 0; i < pointList.size(); i++) {
		if ((pointList[i].x  == target.x ) && (pointList[i].y == target.y)) { 
			return i;
		}
	}
	return -1;
}

square findRandomSquare(vector<point> pointlist) // todo
{
	addFinalPoint(pointlist);
	drawPoints(pointlist);
	return square();
}
